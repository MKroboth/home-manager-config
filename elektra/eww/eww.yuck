; Windows

(defwindow middle-bar
    :monitor 4
    :geometry (geometry :x "0%"
                        :y "0%"
                        :width "100%"
                        :height "24px"
                        :anchor "bottom center")
    :stacking "fg"
    :reserve (struts :distance "40px" :side "bottom")
    :exclusive true
    :focusable false
    :windowtype "dock"
    :namespace "bar"
    :wm-ignore false
  (top-bar))

(defwindow screen-settings
  :monitor 4
    :geometry (geometry :x "400px"
                        :y "0px"
                        :width "300px"
                        :anchor "bottom right") 
(revealer :reveal showMonitorStuff :transition "slideup"
  (box :orientation "vertical"
    (box 
      (label :text "Night Mode") 
      (checkbox
                :onchecked   `hyprctl hyprsunset temperature 2500` 
                :onunchecked `hyprctl hyprsunset temperature 6000`))
    (box 
      (label :text "Brightness") 
      (scale :min 10 :max 100 :onchange `hyprctl hyprsunset gamma {}`))
  )
))

; Widgets

(defwidget top-bar [] 
  (box :class "bar-padding"
    (centerbox 
      (box :class "container" 
           :halign "start" 
           :orientation "horizontal" 
        (workspaces))
  (box :class "container"
       :halign "center"
       :orientation "horizontal"
       (window_title))
  (box :class "container"
       :halign "end"
       :space-evenly false
       (seperator :before "window-title")
       (monitor)
       (seperator :before "monitor")
       (audio)
       (seperator :before "audio")
       (network)
       (seperator :before "network")
       (cpu)
       (seperator :before "cpu")
       (memory)
       (seperator :before "memory")
       (temps)
       (seperator :before "temps")
       (time)
       (seperator :before "time")
       (tray)))))

(include "./hyprland.yuck")

(defpoll cpu_temperature
  :initial "?⁰C"
  :interval "2s"
  "~/.config/eww/scripts/get-temperature")

(defpoll network 
  :interval "5s" 
  :initial "null" `ip -j address show dev br0`)

(deflisten window 
  :initial "..." 
  "~/.config/eww/scripts/get-window-title")

(defwidget window_title [] 
  (box :class "window-title-widget" 
    (label :text "${window}")))

(defvar showMonitorStuff false)
(defpoll audio_mute 
    :interval "1s" 
    :initial "?"
  `pactl get-sink-mute 62 | cut -d' ' -f2`)

(defwidget seperator [before] 
  (literal :content `(label :valign "fill" :vexpand "true" :class "${before}-seperator widget-seperator" :text "")`))

(defwidget monitor [] 
  (box :class "monitor-widget-background"
       (box :class "monitor-widget"
            (checkbox  :onchecked `eww update showMonitorStuff=true` :onunchecked `eww update showMonitorStuff=false` (label :text "󰍹" :onclick `eww open screen-settings`) ))))

(defwidget audio [] 
  (box :class "audio-widget-background"
       (box :class "audio-widget"
             (label :text {audio_mute == "no"? "󰕾": "󰸈"}))))

(defwidget network []
  (box :class "network-widget-background"
       (box :class "network-widget" 
           :space-evenly false 
             :spacing 4 
           (label :text "${network?.[0]?.ifname}: ${network?.[0]?.addr_info?.[0]?.local}/${network?.[0]?.addr_info?.[0]?.prefixlen}") 
           (network_state))))

(defwidget network_state [] 
        (label :class "network-state" 
               :text {network?.[0]?.operstate == "UP"? "󰱓": "󰅛 "}))

(defwidget cpu [] 
        (box :class "cpu-widget-background" 
        (box :class "cpu-widget" 
            (label :text "${round(EWW_CPU.avg,2)}%"))))

(defwidget memory [] 
  (box :class "memory-widget-background"
     (box :class "memory-widget"
         (label :text "${round(EWW_RAM.used_mem_perc,2)}%  "))))

(defwidget temps []
   (box :class "temps-widget-background" 
      (box :class "temps-widget"
        (label :text "${cpu_temperature} "))))

(defwidget time [] 
        (box :class "time-widget-background"
  (tooltip (calendar) (box :class "time-widget"
              (label :text "${formattime(EWW_TIME, "%R %A", "Europe/Vienna")}")))))

(defwidget tray [] 
  (box :class "tray-widget-background" 
       (box :class "tray-widget" (systray))))
